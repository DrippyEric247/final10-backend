{"ast":null,"code":"import api from './authService';\n// Live call to your backend (which calls eBay API)\nexport async function searchEbay(query) {\n  const res = await api.get(`/ebay/search?q=${encodeURIComponent(query)}`);\n  return res.data; // actual eBay items\n}\nexport async function getEbayItem(id) {\n  const res = await api.get(`/ebay/item/${id}`);\n  return res.data;\n}\n\n// eBay service object with mock methods\nconst ebayService = {\n  // Search items with filters (using mock data for now)\n  async searchItems(filters = {}) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const {\n      keywords,\n      category,\n      minPrice,\n      maxPrice,\n      timeRemaining,\n      sortBy,\n      page = 1,\n      limit = 20\n    } = filters;\n    const items = generateMockEbayItems(limit, keywords);\n\n    // Apply filters\n    let filteredItems = items;\n    if (category) {\n      filteredItems = filteredItems.filter(item => item.category === category);\n    }\n    if (minPrice) {\n      filteredItems = filteredItems.filter(item => item.currentBid >= parseInt(minPrice));\n    }\n    if (maxPrice) {\n      filteredItems = filteredItems.filter(item => item.currentBid <= parseInt(maxPrice));\n    }\n    if (timeRemaining) {\n      const maxTime = parseInt(timeRemaining) * 60; // Convert minutes to seconds\n      filteredItems = filteredItems.filter(item => item.timeRemaining <= maxTime);\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case 'endTime':\n        filteredItems.sort((a, b) => a.timeRemaining - b.timeRemaining);\n        break;\n      case 'dealPotential':\n        filteredItems.sort((a, b) => b.aiScore.dealPotential - a.aiScore.dealPotential);\n        break;\n      case 'trending':\n        filteredItems.sort((a, b) => b.aiScore.trendingScore - a.aiScore.trendingScore);\n        break;\n      case 'price':\n        filteredItems.sort((a, b) => a.currentBid - b.currentBid);\n        break;\n    }\n    return {\n      items: filteredItems,\n      pagination: {\n        current: page,\n        pages: Math.ceil(filteredItems.length / limit),\n        total: filteredItems.length,\n        limit\n      }\n    };\n  },\n  // Get item details by eBay item ID (using mock data for now)\n  async getItemDetails(itemId) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    const items = generateMockEbayItems(1);\n    const item = items[0];\n    item.id = itemId;\n\n    // Add bidding history\n    item.bids = Array.from({\n      length: Math.floor(Math.random() * 10) + 1\n    }, (_, i) => ({\n      bidder: `bidder_${i + 1}`,\n      amount: item.startingPrice + i * 10,\n      timestamp: new Date(Date.now() - i * 60000) // Each bid 1 minute apart\n    }));\n    return item;\n  },\n  // Get trending eBay items (using mock data for now)\n  async getTrendingItems(category = 'all', limit = 20) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const items = generateMockEbayItems(limit);\n    // Make trending items have higher trending scores\n    items.forEach(item => {\n      item.aiScore.trendingScore = Math.floor(Math.random() * 20) + 80; // 80-100\n    });\n    return {\n      items,\n      categories: [{\n        _id: 'electronics',\n        count: 45\n      }, {\n        _id: 'fashion',\n        count: 32\n      }, {\n        _id: 'home',\n        count: 28\n      }, {\n        _id: 'sports',\n        count: 21\n      }, {\n        _id: 'collectibles',\n        count: 18\n      }]\n    };\n  },\n  // Get ending soon items (auctions ending in next 10 minutes)\n  async getEndingSoonItems(limit = 20) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const items = generateMockEbayItems(limit);\n    // Make items ending soon have shorter time remaining\n    items.forEach(item => {\n      item.timeRemaining = Math.floor(Math.random() * 300) + 30; // 30 seconds to 5 minutes\n    });\n    return {\n      items\n    };\n  },\n  // Get best deals (high deal potential items)\n  async getBestDeals(limit = 20) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const items = generateMockEbayItems(limit);\n    // Make best deals have higher deal potential\n    items.forEach(item => {\n      item.aiScore.dealPotential = Math.floor(Math.random() * 20) + 80; // 80-100\n    });\n    return {\n      items\n    };\n  },\n  // Get categories (using mock data for now)\n  async getCategories(parentCategoryId = null) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const categories = [{\n      id: 'electronics',\n      name: 'Electronics',\n      count: 1250\n    }, {\n      id: 'fashion',\n      name: 'Fashion',\n      count: 890\n    }, {\n      id: 'home',\n      name: 'Home & Garden',\n      count: 650\n    }, {\n      id: 'sports',\n      name: 'Sports',\n      count: 420\n    }, {\n      id: 'collectibles',\n      name: 'Collectibles',\n      count: 380\n    }, {\n      id: 'automotive',\n      name: 'Automotive',\n      count: 290\n    }];\n    return {\n      categories\n    };\n  },\n  // Get seller information (using mock data for now)\n  async getSellerInfo(sellerUsername) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      username: sellerUsername,\n      rating: (Math.random() * 2 + 3).toFixed(1),\n      feedbackCount: Math.floor(Math.random() * 1000) + 100,\n      memberSince: '2018',\n      location: 'United States'\n    };\n  },\n  // Get similar items (using mock data for now)\n  async getSimilarItems(itemId, limit = 10) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return {\n      items: generateMockEbayItems(limit)\n    };\n  },\n  // Get item history (bidding history for auctions) - using mock data\n  async getItemHistory(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      bids: Array.from({\n        length: Math.floor(Math.random() * 15) + 1\n      }, (_, i) => ({\n        bidder: `bidder_${i + 1}`,\n        amount: 100 + i * 25,\n        timestamp: new Date(Date.now() - i * 300000) // Each bid 5 minutes apart\n      }))\n    };\n  },\n  // Get watchlist (using mock data for now)\n  async getWatchlist() {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      items: generateMockEbayItems(5)\n    };\n  },\n  // Add item to watchlist (mock implementation)\n  async addToWatchlist(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      message: 'Item added to watchlist'\n    };\n  },\n  // Remove item from watchlist (mock implementation)\n  async removeFromWatchlist(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      message: 'Item removed from watchlist'\n    };\n  },\n  // Get saved searches (using mock data for now)\n  async getSavedSearches() {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      searches: [{\n        id: 1,\n        name: 'iPhone Deals',\n        keywords: 'iPhone',\n        maxPrice: 500\n      }, {\n        id: 2,\n        name: 'Gaming Laptops',\n        keywords: 'gaming laptop',\n        maxPrice: 1000\n      }]\n    };\n  },\n  // Create saved search (mock implementation)\n  async createSavedSearch(searchData) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      id: Date.now(),\n      ...searchData\n    };\n  },\n  // Update saved search (mock implementation)\n  async updateSavedSearch(searchId, searchData) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      id: searchId,\n      ...searchData\n    };\n  },\n  // Delete saved search (mock implementation)\n  async deleteSavedSearch(searchId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      message: 'Search deleted'\n    };\n  },\n  // Get item recommendations based on user behavior (using mock data)\n  async getRecommendations(limit = 20) {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    return {\n      items: generateMockEbayItems(limit)\n    };\n  },\n  // Get price history for an item (using mock data)\n  async getPriceHistory(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      priceHistory: Array.from({\n        length: 30\n      }, (_, i) => ({\n        date: new Date(Date.now() - i * 24 * 60 * 60 * 1000),\n        price: 200 + Math.floor(Math.random() * 100)\n      }))\n    };\n  },\n  // Get market insights for a category or keyword (using mock data)\n  async getMarketInsights(keyword, categoryId = null) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return {\n      keyword,\n      categoryId,\n      averagePrice: Math.floor(Math.random() * 500) + 100,\n      priceRange: {\n        min: 50,\n        max: 800\n      },\n      trend: 'increasing',\n      competition: 'medium'\n    };\n  }\n};\nexport { ebayService };\nexport default ebayService;","map":{"version":3,"names":["api","searchEbay","query","res","get","encodeURIComponent","data","getEbayItem","id","ebayService","searchItems","filters","Promise","resolve","setTimeout","keywords","category","minPrice","maxPrice","timeRemaining","sortBy","page","limit","items","generateMockEbayItems","filteredItems","filter","item","currentBid","parseInt","maxTime","sort","a","b","aiScore","dealPotential","trendingScore","pagination","current","pages","Math","ceil","length","total","getItemDetails","itemId","bids","Array","from","floor","random","_","i","bidder","amount","startingPrice","timestamp","Date","now","getTrendingItems","forEach","categories","_id","count","getEndingSoonItems","getBestDeals","getCategories","parentCategoryId","name","getSellerInfo","sellerUsername","username","rating","toFixed","feedbackCount","memberSince","location","getSimilarItems","getItemHistory","getWatchlist","addToWatchlist","success","message","removeFromWatchlist","getSavedSearches","searches","createSavedSearch","searchData","updateSavedSearch","searchId","deleteSavedSearch","getRecommendations","getPriceHistory","priceHistory","date","price","getMarketInsights","keyword","categoryId","averagePrice","priceRange","min","max","trend","competition"],"sources":["C:/Users/ericv/final10/client/src/services/ebayService.js"],"sourcesContent":["import api from './authService';\r\n// Live call to your backend (which calls eBay API)\r\nexport async function searchEbay(query) {\r\n    const res = await api.get(`/ebay/search?q=${encodeURIComponent(query)}`);\r\n    return res.data; // actual eBay items\r\n  }\r\n  \r\n  export async function getEbayItem(id) {\r\n    const res = await api.get(`/ebay/item/${id}`);\r\n    return res.data;\r\n  }\r\n\r\n// eBay service object with mock methods\r\nconst ebayService = {\r\n  // Search items with filters (using mock data for now)\r\n  async searchItems(filters = {}) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const { keywords, category, minPrice, maxPrice, timeRemaining, sortBy, page = 1, limit = 20 } = filters;\r\n    const items = generateMockEbayItems(limit, keywords);\r\n    \r\n    // Apply filters\r\n    let filteredItems = items;\r\n    \r\n    if (category) {\r\n      filteredItems = filteredItems.filter(item => item.category === category);\r\n    }\r\n    \r\n    if (minPrice) {\r\n      filteredItems = filteredItems.filter(item => item.currentBid >= parseInt(minPrice));\r\n    }\r\n    \r\n    if (maxPrice) {\r\n      filteredItems = filteredItems.filter(item => item.currentBid <= parseInt(maxPrice));\r\n    }\r\n    \r\n    if (timeRemaining) {\r\n      const maxTime = parseInt(timeRemaining) * 60; // Convert minutes to seconds\r\n      filteredItems = filteredItems.filter(item => item.timeRemaining <= maxTime);\r\n    }\r\n    \r\n    // Apply sorting\r\n    switch (sortBy) {\r\n      case 'endTime':\r\n        filteredItems.sort((a, b) => a.timeRemaining - b.timeRemaining);\r\n        break;\r\n      case 'dealPotential':\r\n        filteredItems.sort((a, b) => b.aiScore.dealPotential - a.aiScore.dealPotential);\r\n        break;\r\n      case 'trending':\r\n        filteredItems.sort((a, b) => b.aiScore.trendingScore - a.aiScore.trendingScore);\r\n        break;\r\n      case 'price':\r\n        filteredItems.sort((a, b) => a.currentBid - b.currentBid);\r\n        break;\r\n    }\r\n    \r\n    return {\r\n      items: filteredItems,\r\n      pagination: {\r\n        current: page,\r\n        pages: Math.ceil(filteredItems.length / limit),\r\n        total: filteredItems.length,\r\n        limit\r\n      }\r\n    };\r\n  },\r\n\r\n  // Get item details by eBay item ID (using mock data for now)\r\n  async getItemDetails(itemId) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    const items = generateMockEbayItems(1);\r\n    const item = items[0];\r\n    item.id = itemId;\r\n    \r\n    // Add bidding history\r\n    item.bids = Array.from({ length: Math.floor(Math.random() * 10) + 1 }, (_, i) => ({\r\n      bidder: `bidder_${i + 1}`,\r\n      amount: item.startingPrice + (i * 10),\r\n      timestamp: new Date(Date.now() - (i * 60000)) // Each bid 1 minute apart\r\n    }));\r\n    \r\n    return item;\r\n  },\r\n\r\n  // Get trending eBay items (using mock data for now)\r\n  async getTrendingItems(category = 'all', limit = 20) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const items = generateMockEbayItems(limit);\r\n    // Make trending items have higher trending scores\r\n    items.forEach(item => {\r\n      item.aiScore.trendingScore = Math.floor(Math.random() * 20) + 80; // 80-100\r\n    });\r\n    \r\n    return {\r\n      items,\r\n      categories: [\r\n        { _id: 'electronics', count: 45 },\r\n        { _id: 'fashion', count: 32 },\r\n        { _id: 'home', count: 28 },\r\n        { _id: 'sports', count: 21 },\r\n        { _id: 'collectibles', count: 18 }\r\n      ]\r\n    };\r\n  },\r\n\r\n  // Get ending soon items (auctions ending in next 10 minutes)\r\n  async getEndingSoonItems(limit = 20) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const items = generateMockEbayItems(limit);\r\n    // Make items ending soon have shorter time remaining\r\n    items.forEach(item => {\r\n      item.timeRemaining = Math.floor(Math.random() * 300) + 30; // 30 seconds to 5 minutes\r\n    });\r\n    \r\n    return { items };\r\n  },\r\n\r\n  // Get best deals (high deal potential items)\r\n  async getBestDeals(limit = 20) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const items = generateMockEbayItems(limit);\r\n    // Make best deals have higher deal potential\r\n    items.forEach(item => {\r\n      item.aiScore.dealPotential = Math.floor(Math.random() * 20) + 80; // 80-100\r\n    });\r\n    \r\n    return { items };\r\n  },\r\n\r\n  // Get categories (using mock data for now)\r\n  async getCategories(parentCategoryId = null) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const categories = [\r\n      { id: 'electronics', name: 'Electronics', count: 1250 },\r\n      { id: 'fashion', name: 'Fashion', count: 890 },\r\n      { id: 'home', name: 'Home & Garden', count: 650 },\r\n      { id: 'sports', name: 'Sports', count: 420 },\r\n      { id: 'collectibles', name: 'Collectibles', count: 380 },\r\n      { id: 'automotive', name: 'Automotive', count: 290 }\r\n    ];\r\n    \r\n    return { categories };\r\n  },\r\n\r\n  // Get seller information (using mock data for now)\r\n  async getSellerInfo(sellerUsername) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      username: sellerUsername,\r\n      rating: (Math.random() * 2 + 3).toFixed(1),\r\n      feedbackCount: Math.floor(Math.random() * 1000) + 100,\r\n      memberSince: '2018',\r\n      location: 'United States'\r\n    };\r\n  },\r\n\r\n  // Get similar items (using mock data for now)\r\n  async getSimilarItems(itemId, limit = 10) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return { items: generateMockEbayItems(limit) };\r\n  },\r\n\r\n  // Get item history (bidding history for auctions) - using mock data\r\n  async getItemHistory(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      bids: Array.from({ length: Math.floor(Math.random() * 15) + 1 }, (_, i) => ({\r\n        bidder: `bidder_${i + 1}`,\r\n        amount: 100 + (i * 25),\r\n        timestamp: new Date(Date.now() - (i * 300000)) // Each bid 5 minutes apart\r\n      }))\r\n    };\r\n  },\r\n\r\n  // Get watchlist (using mock data for now)\r\n  async getWatchlist() {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { items: generateMockEbayItems(5) };\r\n  },\r\n\r\n  // Add item to watchlist (mock implementation)\r\n  async addToWatchlist(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, message: 'Item added to watchlist' };\r\n  },\r\n\r\n  // Remove item from watchlist (mock implementation)\r\n  async removeFromWatchlist(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, message: 'Item removed from watchlist' };\r\n  },\r\n\r\n  // Get saved searches (using mock data for now)\r\n  async getSavedSearches() {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      searches: [\r\n        { id: 1, name: 'iPhone Deals', keywords: 'iPhone', maxPrice: 500 },\r\n        { id: 2, name: 'Gaming Laptops', keywords: 'gaming laptop', maxPrice: 1000 }\r\n      ]\r\n    };\r\n  },\r\n\r\n  // Create saved search (mock implementation)\r\n  async createSavedSearch(searchData) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, id: Date.now(), ...searchData };\r\n  },\r\n\r\n  // Update saved search (mock implementation)\r\n  async updateSavedSearch(searchId, searchData) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, id: searchId, ...searchData };\r\n  },\r\n\r\n  // Delete saved search (mock implementation)\r\n  async deleteSavedSearch(searchId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, message: 'Search deleted' };\r\n  },\r\n\r\n  // Get item recommendations based on user behavior (using mock data)\r\n  async getRecommendations(limit = 20) {\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    return { items: generateMockEbayItems(limit) };\r\n  },\r\n\r\n  // Get price history for an item (using mock data)\r\n  async getPriceHistory(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      priceHistory: Array.from({ length: 30 }, (_, i) => ({\r\n        date: new Date(Date.now() - (i * 24 * 60 * 60 * 1000)),\r\n        price: 200 + Math.floor(Math.random() * 100)\r\n      }))\r\n    };\r\n  },\r\n\r\n  // Get market insights for a category or keyword (using mock data)\r\n  async getMarketInsights(keyword, categoryId = null) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return {\r\n      keyword,\r\n      categoryId,\r\n      averagePrice: Math.floor(Math.random() * 500) + 100,\r\n      priceRange: {\r\n        min: 50,\r\n        max: 800\r\n      },\r\n      trend: 'increasing',\r\n      competition: 'medium'\r\n    };\r\n  }\r\n};\r\n\r\nexport { ebayService };\r\nexport default ebayService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}