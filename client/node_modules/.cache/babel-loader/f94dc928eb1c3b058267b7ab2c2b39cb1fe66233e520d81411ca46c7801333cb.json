{"ast":null,"code":"import api from './authService';\n\n// Mock eBay data generator\nconst generateMockEbayItems = (count = 20, searchTerm = '') => {\n  const categories = ['Electronics', 'Fashion', 'Home & Garden', 'Sports', 'Collectibles', 'Automotive'];\n  const conditions = ['New', 'Used', 'Refurbished', 'For Parts'];\n  const locations = ['New York, NY', 'Los Angeles, CA', 'Chicago, IL', 'Houston, TX', 'Phoenix, AZ'];\n  return Array.from({\n    length: count\n  }, (_, i) => {\n    const category = categories[Math.floor(Math.random() * categories.length)];\n    const condition = conditions[Math.floor(Math.random() * conditions.length)];\n    const location = locations[Math.floor(Math.random() * locations.length)];\n    const currentBid = Math.floor(Math.random() * 1000) + 50;\n    const timeRemaining = Math.floor(Math.random() * 600) + 60; // 1-10 minutes\n\n    return {\n      id: `ebay_${Date.now()}_${i}`,\n      title: searchTerm ? `${searchTerm} - ${category} Item ${i + 1}` : `${category} Item ${i + 1} - ${condition}`,\n      description: `High-quality ${category.toLowerCase()} item in ${condition.toLowerCase()} condition. Perfect for collectors and enthusiasts.`,\n      currentBid,\n      startingPrice: Math.floor(currentBid * 0.6),\n      timeRemaining,\n      image: `https://picsum.photos/400/300?random=${i}`,\n      category: category.toLowerCase(),\n      condition: condition.toLowerCase(),\n      dealPotential: Math.floor(Math.random() * 40) + 60,\n      // 60-100\n      competitionLevel: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)],\n      trendingScore: Math.floor(Math.random() * 30) + 70,\n      // 70-100\n      platform: 'eBay',\n      bidCount: Math.floor(Math.random() * 20) + 1,\n      seller: {\n        username: `seller_${Math.floor(Math.random() * 1000)}`,\n        profileImage: `https://i.pravatar.cc/40?img=${i}`,\n        rating: (Math.random() * 2 + 3).toFixed(1) // 3.0-5.0\n      },\n      location,\n      itemUrl: `https://ebay.com/itm/${Date.now()}_${i}`,\n      aiScore: {\n        dealPotential: Math.floor(Math.random() * 40) + 60,\n        competitionLevel: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)],\n        trendingScore: Math.floor(Math.random() * 30) + 70\n      }\n    };\n  });\n};\nexport const ebayService = {\n  // Search eBay items (using mock data for now)\n  async searchItems(searchParams = {}) {\n    const {\n      keywords = '',\n      categoryId = '',\n      minPrice = '',\n      maxPrice = '',\n      condition = '',\n      sortOrder = 'EndTimeSoonest',\n      page = 1,\n      limit = 20\n    } = searchParams;\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const items = generateMockEbayItems(limit, keywords);\n    return {\n      items,\n      pagination: {\n        current: page,\n        pages: Math.ceil(100 / limit),\n        // Mock total pages\n        total: 100,\n        limit,\n        hasNextPage: page < Math.ceil(100 / limit)\n      }\n    };\n  },\n  // Get item details by eBay item ID (using mock data for now)\n  async getItemDetails(itemId) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    const items = generateMockEbayItems(1);\n    const item = items[0];\n    item.id = itemId;\n\n    // Add bidding history\n    item.bids = Array.from({\n      length: Math.floor(Math.random() * 10) + 1\n    }, (_, i) => ({\n      bidder: `bidder_${i + 1}`,\n      amount: item.startingPrice + i * 10,\n      timestamp: new Date(Date.now() - i * 60000) // Each bid 1 minute apart\n    }));\n    return item;\n  },\n  // Get trending eBay items (using mock data for now)\n  async getTrendingItems(category = 'all', limit = 20) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const items = generateMockEbayItems(limit);\n    // Make trending items have higher trending scores\n    items.forEach(item => {\n      item.aiScore.trendingScore = Math.floor(Math.random() * 20) + 80; // 80-100\n    });\n    return {\n      items,\n      categories: [{\n        _id: 'electronics',\n        count: 45\n      }, {\n        _id: 'fashion',\n        count: 32\n      }, {\n        _id: 'home',\n        count: 28\n      }, {\n        _id: 'sports',\n        count: 21\n      }, {\n        _id: 'collectibles',\n        count: 18\n      }]\n    };\n  },\n  // Get ending soon items (auctions ending in next 10 minutes)\n  async getEndingSoonItems(limit = 20) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const items = generateMockEbayItems(limit);\n    // Make items ending soon have shorter time remaining\n    items.forEach(item => {\n      item.timeRemaining = Math.floor(Math.random() * 300) + 30; // 30 seconds to 5 minutes\n    });\n    return {\n      items\n    };\n  },\n  // Get best deals (high deal potential items)\n  async getBestDeals(limit = 20) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    const items = generateMockEbayItems(limit);\n    // Make best deals have higher deal potential\n    items.forEach(item => {\n      item.aiScore.dealPotential = Math.floor(Math.random() * 20) + 80; // 80-100\n    });\n    return {\n      items\n    };\n  },\n  // Get categories (using mock data for now)\n  async getCategories(parentCategoryId = null) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const categories = [{\n      id: 'electronics',\n      name: 'Electronics',\n      count: 1250\n    }, {\n      id: 'fashion',\n      name: 'Fashion',\n      count: 890\n    }, {\n      id: 'home',\n      name: 'Home & Garden',\n      count: 650\n    }, {\n      id: 'sports',\n      name: 'Sports',\n      count: 420\n    }, {\n      id: 'collectibles',\n      name: 'Collectibles',\n      count: 380\n    }, {\n      id: 'automotive',\n      name: 'Automotive',\n      count: 290\n    }];\n    return {\n      categories\n    };\n  },\n  // Get seller information (using mock data for now)\n  async getSellerInfo(sellerUsername) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      username: sellerUsername,\n      rating: (Math.random() * 2 + 3).toFixed(1),\n      feedbackCount: Math.floor(Math.random() * 1000) + 100,\n      memberSince: '2018',\n      location: 'United States'\n    };\n  },\n  // Get similar items (using mock data for now)\n  async getSimilarItems(itemId, limit = 10) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return {\n      items: generateMockEbayItems(limit)\n    };\n  },\n  // Get item history (bidding history for auctions) - using mock data\n  async getItemHistory(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      bids: Array.from({\n        length: Math.floor(Math.random() * 15) + 1\n      }, (_, i) => ({\n        bidder: `bidder_${i + 1}`,\n        amount: 100 + i * 25,\n        timestamp: new Date(Date.now() - i * 300000) // Each bid 5 minutes apart\n      }))\n    };\n  },\n  // Get watchlist (using mock data for now)\n  async getWatchlist() {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      items: generateMockEbayItems(5)\n    };\n  },\n  // Add item to watchlist (mock implementation)\n  async addToWatchlist(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      message: 'Item added to watchlist'\n    };\n  },\n  // Remove item from watchlist (mock implementation)\n  async removeFromWatchlist(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      message: 'Item removed from watchlist'\n    };\n  },\n  // Get saved searches (using mock data for now)\n  async getSavedSearches() {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      searches: [{\n        id: 1,\n        name: 'iPhone Deals',\n        keywords: 'iPhone',\n        maxPrice: 500\n      }, {\n        id: 2,\n        name: 'Gaming Laptops',\n        keywords: 'gaming laptop',\n        maxPrice: 1000\n      }]\n    };\n  },\n  // Create saved search (mock implementation)\n  async createSavedSearch(searchData) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      id: Date.now(),\n      ...searchData\n    };\n  },\n  // Update saved search (mock implementation)\n  async updateSavedSearch(searchId, searchData) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      id: searchId,\n      ...searchData\n    };\n  },\n  // Delete saved search (mock implementation)\n  async deleteSavedSearch(searchId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      message: 'Search deleted'\n    };\n  },\n  // Get item recommendations based on user behavior (using mock data)\n  async getRecommendations(limit = 20) {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    return {\n      items: generateMockEbayItems(limit)\n    };\n  },\n  // Get price history for an item (using mock data)\n  async getPriceHistory(itemId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      priceHistory: Array.from({\n        length: 30\n      }, (_, i) => ({\n        date: new Date(Date.now() - i * 24 * 60 * 60 * 1000),\n        price: 200 + Math.floor(Math.random() * 100)\n      }))\n    };\n  },\n  // Get market insights for a category or keyword (using mock data)\n  async getMarketInsights(keyword, categoryId = null) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return {\n      keyword,\n      categoryId,\n      averagePrice: Math.floor(Math.random() * 500) + 100,\n      priceRange: {\n        min: 50,\n        max: 800\n      },\n      trend: 'increasing',\n      competition: 'medium'\n    };\n  }\n};\nexport default ebayService;","map":{"version":3,"names":["api","generateMockEbayItems","count","searchTerm","categories","conditions","locations","Array","from","length","_","i","category","Math","floor","random","condition","location","currentBid","timeRemaining","id","Date","now","title","description","toLowerCase","startingPrice","image","dealPotential","competitionLevel","trendingScore","platform","bidCount","seller","username","profileImage","rating","toFixed","itemUrl","aiScore","ebayService","searchItems","searchParams","keywords","categoryId","minPrice","maxPrice","sortOrder","page","limit","Promise","resolve","setTimeout","items","pagination","current","pages","ceil","total","hasNextPage","getItemDetails","itemId","item","bids","bidder","amount","timestamp","getTrendingItems","forEach","_id","getEndingSoonItems","getBestDeals","getCategories","parentCategoryId","name","getSellerInfo","sellerUsername","feedbackCount","memberSince","getSimilarItems","getItemHistory","getWatchlist","addToWatchlist","success","message","removeFromWatchlist","getSavedSearches","searches","createSavedSearch","searchData","updateSavedSearch","searchId","deleteSavedSearch","getRecommendations","getPriceHistory","priceHistory","date","price","getMarketInsights","keyword","averagePrice","priceRange","min","max","trend","competition"],"sources":["C:/Users/ericv/final10/client/src/services/ebayService.js"],"sourcesContent":["import api from './authService';\r\n\r\n// Mock eBay data generator\r\nconst generateMockEbayItems = (count = 20, searchTerm = '') => {\r\n  const categories = ['Electronics', 'Fashion', 'Home & Garden', 'Sports', 'Collectibles', 'Automotive'];\r\n  const conditions = ['New', 'Used', 'Refurbished', 'For Parts'];\r\n  const locations = ['New York, NY', 'Los Angeles, CA', 'Chicago, IL', 'Houston, TX', 'Phoenix, AZ'];\r\n  \r\n  return Array.from({ length: count }, (_, i) => {\r\n    const category = categories[Math.floor(Math.random() * categories.length)];\r\n    const condition = conditions[Math.floor(Math.random() * conditions.length)];\r\n    const location = locations[Math.floor(Math.random() * locations.length)];\r\n    const currentBid = Math.floor(Math.random() * 1000) + 50;\r\n    const timeRemaining = Math.floor(Math.random() * 600) + 60; // 1-10 minutes\r\n    \r\n    return {\r\n      id: `ebay_${Date.now()}_${i}`,\r\n      title: searchTerm ? `${searchTerm} - ${category} Item ${i + 1}` : `${category} Item ${i + 1} - ${condition}`,\r\n      description: `High-quality ${category.toLowerCase()} item in ${condition.toLowerCase()} condition. Perfect for collectors and enthusiasts.`,\r\n      currentBid,\r\n      startingPrice: Math.floor(currentBid * 0.6),\r\n      timeRemaining,\r\n      image: `https://picsum.photos/400/300?random=${i}`,\r\n      category: category.toLowerCase(),\r\n      condition: condition.toLowerCase(),\r\n      dealPotential: Math.floor(Math.random() * 40) + 60, // 60-100\r\n      competitionLevel: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)],\r\n      trendingScore: Math.floor(Math.random() * 30) + 70, // 70-100\r\n      platform: 'eBay',\r\n      bidCount: Math.floor(Math.random() * 20) + 1,\r\n      seller: {\r\n        username: `seller_${Math.floor(Math.random() * 1000)}`,\r\n        profileImage: `https://i.pravatar.cc/40?img=${i}`,\r\n        rating: (Math.random() * 2 + 3).toFixed(1) // 3.0-5.0\r\n      },\r\n      location,\r\n      itemUrl: `https://ebay.com/itm/${Date.now()}_${i}`,\r\n      aiScore: {\r\n        dealPotential: Math.floor(Math.random() * 40) + 60,\r\n        competitionLevel: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)],\r\n        trendingScore: Math.floor(Math.random() * 30) + 70\r\n      }\r\n    };\r\n  });\r\n};\r\n\r\nexport const ebayService = {\r\n  // Search eBay items (using mock data for now)\r\n  async searchItems(searchParams = {}) {\r\n    const {\r\n      keywords = '',\r\n      categoryId = '',\r\n      minPrice = '',\r\n      maxPrice = '',\r\n      condition = '',\r\n      sortOrder = 'EndTimeSoonest',\r\n      page = 1,\r\n      limit = 20\r\n    } = searchParams;\r\n\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    const items = generateMockEbayItems(limit, keywords);\r\n    \r\n    return {\r\n      items,\r\n      pagination: {\r\n        current: page,\r\n        pages: Math.ceil(100 / limit), // Mock total pages\r\n        total: 100,\r\n        limit,\r\n        hasNextPage: page < Math.ceil(100 / limit)\r\n      }\r\n    };\r\n  },\r\n\r\n  // Get item details by eBay item ID (using mock data for now)\r\n  async getItemDetails(itemId) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    const items = generateMockEbayItems(1);\r\n    const item = items[0];\r\n    item.id = itemId;\r\n    \r\n    // Add bidding history\r\n    item.bids = Array.from({ length: Math.floor(Math.random() * 10) + 1 }, (_, i) => ({\r\n      bidder: `bidder_${i + 1}`,\r\n      amount: item.startingPrice + (i * 10),\r\n      timestamp: new Date(Date.now() - (i * 60000)) // Each bid 1 minute apart\r\n    }));\r\n    \r\n    return item;\r\n  },\r\n\r\n  // Get trending eBay items (using mock data for now)\r\n  async getTrendingItems(category = 'all', limit = 20) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const items = generateMockEbayItems(limit);\r\n    // Make trending items have higher trending scores\r\n    items.forEach(item => {\r\n      item.aiScore.trendingScore = Math.floor(Math.random() * 20) + 80; // 80-100\r\n    });\r\n    \r\n    return {\r\n      items,\r\n      categories: [\r\n        { _id: 'electronics', count: 45 },\r\n        { _id: 'fashion', count: 32 },\r\n        { _id: 'home', count: 28 },\r\n        { _id: 'sports', count: 21 },\r\n        { _id: 'collectibles', count: 18 }\r\n      ]\r\n    };\r\n  },\r\n\r\n  // Get ending soon items (auctions ending in next 10 minutes)\r\n  async getEndingSoonItems(limit = 20) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const items = generateMockEbayItems(limit);\r\n    // Make items ending soon have shorter time remaining\r\n    items.forEach(item => {\r\n      item.timeRemaining = Math.floor(Math.random() * 300) + 30; // 30 seconds to 5 minutes\r\n    });\r\n    \r\n    return { items };\r\n  },\r\n\r\n  // Get best deals (high deal potential items)\r\n  async getBestDeals(limit = 20) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const items = generateMockEbayItems(limit);\r\n    // Make best deals have higher deal potential\r\n    items.forEach(item => {\r\n      item.aiScore.dealPotential = Math.floor(Math.random() * 20) + 80; // 80-100\r\n    });\r\n    \r\n    return { items };\r\n  },\r\n\r\n  // Get categories (using mock data for now)\r\n  async getCategories(parentCategoryId = null) {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const categories = [\r\n      { id: 'electronics', name: 'Electronics', count: 1250 },\r\n      { id: 'fashion', name: 'Fashion', count: 890 },\r\n      { id: 'home', name: 'Home & Garden', count: 650 },\r\n      { id: 'sports', name: 'Sports', count: 420 },\r\n      { id: 'collectibles', name: 'Collectibles', count: 380 },\r\n      { id: 'automotive', name: 'Automotive', count: 290 }\r\n    ];\r\n    \r\n    return { categories };\r\n  },\r\n\r\n  // Get seller information (using mock data for now)\r\n  async getSellerInfo(sellerUsername) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      username: sellerUsername,\r\n      rating: (Math.random() * 2 + 3).toFixed(1),\r\n      feedbackCount: Math.floor(Math.random() * 1000) + 100,\r\n      memberSince: '2018',\r\n      location: 'United States'\r\n    };\r\n  },\r\n\r\n  // Get similar items (using mock data for now)\r\n  async getSimilarItems(itemId, limit = 10) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return { items: generateMockEbayItems(limit) };\r\n  },\r\n\r\n  // Get item history (bidding history for auctions) - using mock data\r\n  async getItemHistory(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      bids: Array.from({ length: Math.floor(Math.random() * 15) + 1 }, (_, i) => ({\r\n        bidder: `bidder_${i + 1}`,\r\n        amount: 100 + (i * 25),\r\n        timestamp: new Date(Date.now() - (i * 300000)) // Each bid 5 minutes apart\r\n      }))\r\n    };\r\n  },\r\n\r\n  // Get watchlist (using mock data for now)\r\n  async getWatchlist() {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { items: generateMockEbayItems(5) };\r\n  },\r\n\r\n  // Add item to watchlist (mock implementation)\r\n  async addToWatchlist(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, message: 'Item added to watchlist' };\r\n  },\r\n\r\n  // Remove item from watchlist (mock implementation)\r\n  async removeFromWatchlist(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, message: 'Item removed from watchlist' };\r\n  },\r\n\r\n  // Get saved searches (using mock data for now)\r\n  async getSavedSearches() {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      searches: [\r\n        { id: 1, name: 'iPhone Deals', keywords: 'iPhone', maxPrice: 500 },\r\n        { id: 2, name: 'Gaming Laptops', keywords: 'gaming laptop', maxPrice: 1000 }\r\n      ]\r\n    };\r\n  },\r\n\r\n  // Create saved search (mock implementation)\r\n  async createSavedSearch(searchData) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, id: Date.now(), ...searchData };\r\n  },\r\n\r\n  // Update saved search (mock implementation)\r\n  async updateSavedSearch(searchId, searchData) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, id: searchId, ...searchData };\r\n  },\r\n\r\n  // Delete saved search (mock implementation)\r\n  async deleteSavedSearch(searchId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return { success: true, message: 'Search deleted' };\r\n  },\r\n\r\n  // Get item recommendations based on user behavior (using mock data)\r\n  async getRecommendations(limit = 20) {\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    return { items: generateMockEbayItems(limit) };\r\n  },\r\n\r\n  // Get price history for an item (using mock data)\r\n  async getPriceHistory(itemId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return {\r\n      priceHistory: Array.from({ length: 30 }, (_, i) => ({\r\n        date: new Date(Date.now() - (i * 24 * 60 * 60 * 1000)),\r\n        price: 200 + Math.floor(Math.random() * 100)\r\n      }))\r\n    };\r\n  },\r\n\r\n  // Get market insights for a category or keyword (using mock data)\r\n  async getMarketInsights(keyword, categoryId = null) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return {\r\n      keyword,\r\n      categoryId,\r\n      averagePrice: Math.floor(Math.random() * 500) + 100,\r\n      priceRange: {\r\n        min: 50,\r\n        max: 800\r\n      },\r\n      trend: 'increasing',\r\n      competition: 'medium'\r\n    };\r\n  }\r\n};\r\n\r\nexport default ebayService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}