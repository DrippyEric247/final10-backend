{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport hashtagTrackerService from '../services/hashtagTracker';\n\n// Custom hook for hashtag tracking functionality\nexport const useHashtagTracker = () => {\n  _s();\n  const queryClient = useQueryClient();\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const updateIntervalRef = useRef(null);\n\n  // Fetch social media connections\n  const {\n    data: connections,\n    isLoading: connectionsLoading,\n    error: connectionsError,\n    refetch: refetchConnections\n  } = useQuery({\n    queryKey: ['socialConnections'],\n    queryFn: () => hashtagTrackerService.getConnections(),\n    refetchInterval: 30000,\n    // Refetch every 30 seconds\n    retry: 3,\n    onSuccess: data => {\n      const hasConnection = Object.values(data || {}).some(conn => conn.connected);\n      setIsConnected(hasConnection);\n    }\n  });\n\n  // Fetch tracked posts\n  const {\n    data: trackedPosts,\n    isLoading: postsLoading,\n    error: postsError,\n    refetch: refetchPosts\n  } = useQuery({\n    queryKey: ['trackedPosts'],\n    queryFn: () => hashtagTrackerService.getTrackedPosts(),\n    enabled: isConnected,\n    refetchInterval: 60000,\n    // Refetch every minute\n    retry: 3\n  });\n\n  // Fetch campaign stats\n  const {\n    data: campaignStats,\n    isLoading: statsLoading,\n    error: statsError\n  } = useQuery({\n    queryKey: ['campaignStats'],\n    queryFn: () => hashtagTrackerService.getCampaignStats(),\n    enabled: isConnected,\n    refetchInterval: 120000,\n    // Refetch every 2 minutes\n    retry: 3\n  });\n\n  // Connect account mutation\n  const connectMutation = useMutation({\n    mutationFn: ({\n      platform,\n      authData\n    }) => hashtagTrackerService.connectAccount(platform, authData),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['socialConnections']);\n      setIsConnected(true);\n    },\n    onError: error => {\n      console.error('Failed to connect account:', error);\n    }\n  });\n\n  // Disconnect account mutation\n  const disconnectMutation = useMutation({\n    mutationFn: platform => hashtagTrackerService.disconnectAccount(platform),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['socialConnections']);\n      // Check if still connected to any platform\n      const hasConnection = Object.values(connections || {}).some(conn => conn.connected);\n      setIsConnected(hasConnection);\n    }\n  });\n\n  // Trigger hashtag scan mutation\n  const scanMutation = useMutation({\n    mutationFn: () => hashtagTrackerService.triggerHashtagScan(),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['trackedPosts']);\n      queryClient.invalidateQueries(['campaignStats']);\n      setLastUpdate(new Date());\n    }\n  });\n\n  // Submit post for tracking mutation\n  const submitPostMutation = useMutation({\n    mutationFn: ({\n      platform,\n      postUrl,\n      hashtags\n    }) => hashtagTrackerService.submitPostForTracking(platform, postUrl, hashtags),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['trackedPosts']);\n    }\n  });\n\n  // Start real-time updates\n  const startRealTimeUpdates = useCallback(callback => {\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n    }\n    updateIntervalRef.current = setInterval(async () => {\n      try {\n        const [posts, stats] = await Promise.all([hashtagTrackerService.getTrackedPosts(10, 0), hashtagTrackerService.getCampaignStats()]);\n        const updateData = {\n          posts,\n          stats,\n          timestamp: Date.now()\n        };\n        setLastUpdate(new Date());\n        callback(updateData);\n      } catch (error) {\n        console.error('Real-time update failed:', error);\n      }\n    }, 30000); // Update every 30 seconds\n  }, []);\n\n  // Stop real-time updates\n  const stopRealTimeUpdates = useCallback(() => {\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n      updateIntervalRef.current = null;\n    }\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopRealTimeUpdates();\n    };\n  }, [stopRealTimeUpdates]);\n\n  // Utility functions\n  const extractHashtags = useCallback(text => {\n    return hashtagTrackerService.extractHashtags(text);\n  }, []);\n  const calculatePoints = useCallback(post => {\n    return hashtagTrackerService.calculatePoints(post);\n  }, []);\n  const formatPostForDisplay = useCallback(post => {\n    return hashtagTrackerService.formatPostForDisplay(post);\n  }, []);\n\n  // Get connection status for specific platform\n  const getConnectionStatus = useCallback(platform => {\n    return (connections === null || connections === void 0 ? void 0 : connections[platform]) || {\n      connected: false,\n      lastSync: null\n    };\n  }, [connections]);\n\n  // Check if user has any connected platforms\n  const hasAnyConnection = useCallback(() => {\n    return Object.values(connections || {}).some(conn => conn.connected);\n  }, [connections]);\n\n  // Get recent posts for a specific platform\n  const getPlatformPosts = useCallback((platform, limit = 10) => {\n    if (!trackedPosts) return [];\n    return trackedPosts.filter(post => post.platform === platform).slice(0, limit);\n  }, [trackedPosts]);\n\n  // Get posts by hashtag\n  const getPostsByHashtag = useCallback((hashtag, limit = 10) => {\n    if (!trackedPosts) return [];\n    return trackedPosts.filter(post => {\n      var _post$hashtags;\n      return (_post$hashtags = post.hashtags) === null || _post$hashtags === void 0 ? void 0 : _post$hashtags.includes(hashtag);\n    }).slice(0, limit);\n  }, [trackedPosts]);\n\n  // Get total points earned from social posts\n  const getTotalSocialPoints = useCallback(() => {\n    if (!trackedPosts) return 0;\n    return trackedPosts.reduce((total, post) => {\n      return total + calculatePoints(post);\n    }, 0);\n  }, [trackedPosts, calculatePoints]);\n\n  // Get user's social engagement stats\n  const getSocialStats = useCallback(() => {\n    if (!trackedPosts) {\n      return {\n        totalPosts: 0,\n        totalLikes: 0,\n        totalRetweets: 0,\n        totalComments: 0,\n        totalPoints: 0,\n        averageEngagement: 0\n      };\n    }\n    const stats = trackedPosts.reduce((acc, post) => {\n      acc.totalPosts += 1;\n      acc.totalLikes += post.likes || 0;\n      acc.totalRetweets += post.retweets || 0;\n      acc.totalComments += post.comments || 0;\n      acc.totalPoints += calculatePoints(post);\n      return acc;\n    }, {\n      totalPosts: 0,\n      totalLikes: 0,\n      totalRetweets: 0,\n      totalComments: 0,\n      totalPoints: 0\n    });\n    stats.averageEngagement = stats.totalPosts > 0 ? (stats.totalLikes + stats.totalRetweets + stats.totalComments) / stats.totalPosts : 0;\n    return stats;\n  }, [trackedPosts, calculatePoints]);\n  return {\n    // Data\n    connections,\n    trackedPosts,\n    campaignStats,\n    isConnected,\n    lastUpdate,\n    // Loading states\n    connectionsLoading,\n    postsLoading,\n    statsLoading,\n    // Error states\n    connectionsError,\n    postsError,\n    statsError,\n    // Mutations\n    connectAccount: connectMutation.mutate,\n    disconnectAccount: disconnectMutation.mutate,\n    triggerScan: scanMutation.mutate,\n    submitPost: submitPostMutation.mutate,\n    // Mutation states\n    isConnecting: connectMutation.isPending,\n    isDisconnecting: disconnectMutation.isPending,\n    isScanning: scanMutation.isPending,\n    isSubmitting: submitPostMutation.isPending,\n    // Real-time updates\n    startRealTimeUpdates,\n    stopRealTimeUpdates,\n    // Utility functions\n    extractHashtags,\n    calculatePoints,\n    formatPostForDisplay,\n    getConnectionStatus,\n    hasAnyConnection,\n    getPlatformPosts,\n    getPostsByHashtag,\n    getTotalSocialPoints,\n    getSocialStats,\n    // Manual refetch functions\n    refetchConnections,\n    refetchPosts\n  };\n};\n\n// Hook for specific hashtag analytics\n_s(useHashtagTracker, \"22Ad3HkLWMJJxpQ7KYxd4m6Jxpk=\", false, function () {\n  return [useQueryClient, useQuery, useQuery, useQuery, useMutation, useMutation, useMutation, useMutation];\n});\nexport const useHashtagAnalytics = (hashtag, timeRange = '7d') => {\n  _s2();\n  const {\n    data: analytics,\n    isLoading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['hashtagAnalytics', hashtag, timeRange],\n    queryFn: () => hashtagTrackerService.getHashtagAnalytics(hashtag, timeRange),\n    enabled: !!hashtag,\n    refetchInterval: 300000,\n    // Refetch every 5 minutes\n    retry: 3\n  });\n  return {\n    analytics,\n    isLoading,\n    error,\n    refetch\n  };\n};\n\n// Hook for user social stats\n_s2(useHashtagAnalytics, \"dAflwE19XnjJZbdo09rTk7wsw54=\", false, function () {\n  return [useQuery];\n});\nexport const useUserSocialStats = userId => {\n  _s3();\n  const {\n    data: stats,\n    isLoading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['userSocialStats', userId],\n    queryFn: () => hashtagTrackerService.getUserSocialStats(userId),\n    enabled: !!userId,\n    refetchInterval: 60000,\n    // Refetch every minute\n    retry: 3\n  });\n  return {\n    stats,\n    isLoading,\n    error,\n    refetch\n  };\n};\n_s3(useUserSocialStats, \"u+vLfmy8n3y0DWIX9NDoJXenP7k=\", false, function () {\n  return [useQuery];\n});\nexport default useHashtagTracker;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useQuery","useMutation","useQueryClient","hashtagTrackerService","useHashtagTracker","_s","queryClient","isConnected","setIsConnected","lastUpdate","setLastUpdate","updateIntervalRef","data","connections","isLoading","connectionsLoading","error","connectionsError","refetch","refetchConnections","queryKey","queryFn","getConnections","refetchInterval","retry","onSuccess","hasConnection","Object","values","some","conn","connected","trackedPosts","postsLoading","postsError","refetchPosts","getTrackedPosts","enabled","campaignStats","statsLoading","statsError","getCampaignStats","connectMutation","mutationFn","platform","authData","connectAccount","invalidateQueries","onError","console","disconnectMutation","disconnectAccount","scanMutation","triggerHashtagScan","Date","submitPostMutation","postUrl","hashtags","submitPostForTracking","startRealTimeUpdates","callback","current","clearInterval","setInterval","posts","stats","Promise","all","updateData","timestamp","now","stopRealTimeUpdates","extractHashtags","text","calculatePoints","post","formatPostForDisplay","getConnectionStatus","lastSync","hasAnyConnection","getPlatformPosts","limit","filter","slice","getPostsByHashtag","hashtag","_post$hashtags","includes","getTotalSocialPoints","reduce","total","getSocialStats","totalPosts","totalLikes","totalRetweets","totalComments","totalPoints","averageEngagement","acc","likes","retweets","comments","mutate","triggerScan","submitPost","isConnecting","isPending","isDisconnecting","isScanning","isSubmitting","useHashtagAnalytics","timeRange","_s2","analytics","getHashtagAnalytics","useUserSocialStats","userId","_s3","getUserSocialStats"],"sources":["C:/Users/ericv/final10/client/src/hooks/useHashtagTracker.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport hashtagTrackerService from '../services/hashtagTracker';\r\n\r\n// Custom hook for hashtag tracking functionality\r\nexport const useHashtagTracker = () => {\r\n  const queryClient = useQueryClient();\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [lastUpdate, setLastUpdate] = useState(null);\r\n  const updateIntervalRef = useRef(null);\r\n\r\n  // Fetch social media connections\r\n  const {\r\n    data: connections,\r\n    isLoading: connectionsLoading,\r\n    error: connectionsError,\r\n    refetch: refetchConnections\r\n  } = useQuery({\r\n    queryKey: ['socialConnections'],\r\n    queryFn: () => hashtagTrackerService.getConnections(),\r\n    refetchInterval: 30000, // Refetch every 30 seconds\r\n    retry: 3,\r\n    onSuccess: (data) => {\r\n      const hasConnection = Object.values(data || {}).some(conn => conn.connected);\r\n      setIsConnected(hasConnection);\r\n    }\r\n  });\r\n\r\n  // Fetch tracked posts\r\n  const {\r\n    data: trackedPosts,\r\n    isLoading: postsLoading,\r\n    error: postsError,\r\n    refetch: refetchPosts\r\n  } = useQuery({\r\n    queryKey: ['trackedPosts'],\r\n    queryFn: () => hashtagTrackerService.getTrackedPosts(),\r\n    enabled: isConnected,\r\n    refetchInterval: 60000, // Refetch every minute\r\n    retry: 3\r\n  });\r\n\r\n  // Fetch campaign stats\r\n  const {\r\n    data: campaignStats,\r\n    isLoading: statsLoading,\r\n    error: statsError\r\n  } = useQuery({\r\n    queryKey: ['campaignStats'],\r\n    queryFn: () => hashtagTrackerService.getCampaignStats(),\r\n    enabled: isConnected,\r\n    refetchInterval: 120000, // Refetch every 2 minutes\r\n    retry: 3\r\n  });\r\n\r\n  // Connect account mutation\r\n  const connectMutation = useMutation({\r\n    mutationFn: ({ platform, authData }) => \r\n      hashtagTrackerService.connectAccount(platform, authData),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(['socialConnections']);\r\n      setIsConnected(true);\r\n    },\r\n    onError: (error) => {\r\n      console.error('Failed to connect account:', error);\r\n    }\r\n  });\r\n\r\n  // Disconnect account mutation\r\n  const disconnectMutation = useMutation({\r\n    mutationFn: (platform) => hashtagTrackerService.disconnectAccount(platform),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(['socialConnections']);\r\n      // Check if still connected to any platform\r\n      const hasConnection = Object.values(connections || {}).some(conn => conn.connected);\r\n      setIsConnected(hasConnection);\r\n    }\r\n  });\r\n\r\n  // Trigger hashtag scan mutation\r\n  const scanMutation = useMutation({\r\n    mutationFn: () => hashtagTrackerService.triggerHashtagScan(),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(['trackedPosts']);\r\n      queryClient.invalidateQueries(['campaignStats']);\r\n      setLastUpdate(new Date());\r\n    }\r\n  });\r\n\r\n  // Submit post for tracking mutation\r\n  const submitPostMutation = useMutation({\r\n    mutationFn: ({ platform, postUrl, hashtags }) => \r\n      hashtagTrackerService.submitPostForTracking(platform, postUrl, hashtags),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(['trackedPosts']);\r\n    }\r\n  });\r\n\r\n  // Start real-time updates\r\n  const startRealTimeUpdates = useCallback((callback) => {\r\n    if (updateIntervalRef.current) {\r\n      clearInterval(updateIntervalRef.current);\r\n    }\r\n\r\n    updateIntervalRef.current = setInterval(async () => {\r\n      try {\r\n        const [posts, stats] = await Promise.all([\r\n          hashtagTrackerService.getTrackedPosts(10, 0),\r\n          hashtagTrackerService.getCampaignStats()\r\n        ]);\r\n        \r\n        const updateData = { posts, stats, timestamp: Date.now() };\r\n        setLastUpdate(new Date());\r\n        callback(updateData);\r\n      } catch (error) {\r\n        console.error('Real-time update failed:', error);\r\n      }\r\n    }, 30000); // Update every 30 seconds\r\n  }, []);\r\n\r\n  // Stop real-time updates\r\n  const stopRealTimeUpdates = useCallback(() => {\r\n    if (updateIntervalRef.current) {\r\n      clearInterval(updateIntervalRef.current);\r\n      updateIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      stopRealTimeUpdates();\r\n    };\r\n  }, [stopRealTimeUpdates]);\r\n\r\n  // Utility functions\r\n  const extractHashtags = useCallback((text) => {\r\n    return hashtagTrackerService.extractHashtags(text);\r\n  }, []);\r\n\r\n  const calculatePoints = useCallback((post) => {\r\n    return hashtagTrackerService.calculatePoints(post);\r\n  }, []);\r\n\r\n  const formatPostForDisplay = useCallback((post) => {\r\n    return hashtagTrackerService.formatPostForDisplay(post);\r\n  }, []);\r\n\r\n  // Get connection status for specific platform\r\n  const getConnectionStatus = useCallback((platform) => {\r\n    return connections?.[platform] || { connected: false, lastSync: null };\r\n  }, [connections]);\r\n\r\n  // Check if user has any connected platforms\r\n  const hasAnyConnection = useCallback(() => {\r\n    return Object.values(connections || {}).some(conn => conn.connected);\r\n  }, [connections]);\r\n\r\n  // Get recent posts for a specific platform\r\n  const getPlatformPosts = useCallback((platform, limit = 10) => {\r\n    if (!trackedPosts) return [];\r\n    return trackedPosts\r\n      .filter(post => post.platform === platform)\r\n      .slice(0, limit);\r\n  }, [trackedPosts]);\r\n\r\n  // Get posts by hashtag\r\n  const getPostsByHashtag = useCallback((hashtag, limit = 10) => {\r\n    if (!trackedPosts) return [];\r\n    return trackedPosts\r\n      .filter(post => post.hashtags?.includes(hashtag))\r\n      .slice(0, limit);\r\n  }, [trackedPosts]);\r\n\r\n  // Get total points earned from social posts\r\n  const getTotalSocialPoints = useCallback(() => {\r\n    if (!trackedPosts) return 0;\r\n    return trackedPosts.reduce((total, post) => {\r\n      return total + calculatePoints(post);\r\n    }, 0);\r\n  }, [trackedPosts, calculatePoints]);\r\n\r\n  // Get user's social engagement stats\r\n  const getSocialStats = useCallback(() => {\r\n    if (!trackedPosts) {\r\n      return {\r\n        totalPosts: 0,\r\n        totalLikes: 0,\r\n        totalRetweets: 0,\r\n        totalComments: 0,\r\n        totalPoints: 0,\r\n        averageEngagement: 0\r\n      };\r\n    }\r\n\r\n    const stats = trackedPosts.reduce((acc, post) => {\r\n      acc.totalPosts += 1;\r\n      acc.totalLikes += post.likes || 0;\r\n      acc.totalRetweets += post.retweets || 0;\r\n      acc.totalComments += post.comments || 0;\r\n      acc.totalPoints += calculatePoints(post);\r\n      return acc;\r\n    }, {\r\n      totalPosts: 0,\r\n      totalLikes: 0,\r\n      totalRetweets: 0,\r\n      totalComments: 0,\r\n      totalPoints: 0\r\n    });\r\n\r\n    stats.averageEngagement = stats.totalPosts > 0 \r\n      ? (stats.totalLikes + stats.totalRetweets + stats.totalComments) / stats.totalPosts \r\n      : 0;\r\n\r\n    return stats;\r\n  }, [trackedPosts, calculatePoints]);\r\n\r\n  return {\r\n    // Data\r\n    connections,\r\n    trackedPosts,\r\n    campaignStats,\r\n    isConnected,\r\n    lastUpdate,\r\n\r\n    // Loading states\r\n    connectionsLoading,\r\n    postsLoading,\r\n    statsLoading,\r\n\r\n    // Error states\r\n    connectionsError,\r\n    postsError,\r\n    statsError,\r\n\r\n    // Mutations\r\n    connectAccount: connectMutation.mutate,\r\n    disconnectAccount: disconnectMutation.mutate,\r\n    triggerScan: scanMutation.mutate,\r\n    submitPost: submitPostMutation.mutate,\r\n\r\n    // Mutation states\r\n    isConnecting: connectMutation.isPending,\r\n    isDisconnecting: disconnectMutation.isPending,\r\n    isScanning: scanMutation.isPending,\r\n    isSubmitting: submitPostMutation.isPending,\r\n\r\n    // Real-time updates\r\n    startRealTimeUpdates,\r\n    stopRealTimeUpdates,\r\n\r\n    // Utility functions\r\n    extractHashtags,\r\n    calculatePoints,\r\n    formatPostForDisplay,\r\n    getConnectionStatus,\r\n    hasAnyConnection,\r\n    getPlatformPosts,\r\n    getPostsByHashtag,\r\n    getTotalSocialPoints,\r\n    getSocialStats,\r\n\r\n    // Manual refetch functions\r\n    refetchConnections,\r\n    refetchPosts\r\n  };\r\n};\r\n\r\n// Hook for specific hashtag analytics\r\nexport const useHashtagAnalytics = (hashtag, timeRange = '7d') => {\r\n  const {\r\n    data: analytics,\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['hashtagAnalytics', hashtag, timeRange],\r\n    queryFn: () => hashtagTrackerService.getHashtagAnalytics(hashtag, timeRange),\r\n    enabled: !!hashtag,\r\n    refetchInterval: 300000, // Refetch every 5 minutes\r\n    retry: 3\r\n  });\r\n\r\n  return {\r\n    analytics,\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  };\r\n};\r\n\r\n// Hook for user social stats\r\nexport const useUserSocialStats = (userId) => {\r\n  const {\r\n    data: stats,\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['userSocialStats', userId],\r\n    queryFn: () => hashtagTrackerService.getUserSocialStats(userId),\r\n    enabled: !!userId,\r\n    refetchInterval: 60000, // Refetch every minute\r\n    retry: 3\r\n  });\r\n\r\n  return {\r\n    stats,\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  };\r\n};\r\n\r\nexport default useHashtagTracker;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}