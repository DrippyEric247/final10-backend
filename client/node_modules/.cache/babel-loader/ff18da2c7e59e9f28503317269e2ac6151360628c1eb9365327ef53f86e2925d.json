{"ast":null,"code":"import _classPrivateFieldInitSpec from \"C:/Users/ericv/final10/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"C:/Users/ericv/final10/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _classPrivateFieldGet from \"C:/Users/ericv/final10/client/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nvar _provider, _providerCalled;\n// src/timeoutManager.ts\nvar defaultTimeoutProvider = {\n  // We need the wrapper function syntax below instead of direct references to\n  // global setTimeout etc.\n  //\n  // BAD: `setTimeout: setTimeout`\n  // GOOD: `setTimeout: (cb, delay) => setTimeout(cb, delay)`\n  //\n  // If we use direct references here, then anything that wants to spy on or\n  // replace the global setTimeout (like tests) won't work since we'll already\n  // have a hard reference to the original implementation at the time when this\n  // file was imported.\n  setTimeout: (callback, delay) => setTimeout(callback, delay),\n  clearTimeout: timeoutId => clearTimeout(timeoutId),\n  setInterval: (callback, delay) => setInterval(callback, delay),\n  clearInterval: intervalId => clearInterval(intervalId)\n};\nvar TimeoutManager = (_provider = /*#__PURE__*/new WeakMap(), _providerCalled = /*#__PURE__*/new WeakMap(), class TimeoutManager {\n  constructor() {\n    // We cannot have TimeoutManager<T> as we must instantiate it with a concrete\n    // type at app boot; and if we leave that type, then any new timer provider\n    // would need to support ReturnType<typeof setTimeout>, which is infeasible.\n    //\n    // We settle for type safety for the TimeoutProvider type, and accept that\n    // this class is unsafe internally to allow for extension.\n    _classPrivateFieldInitSpec(this, _provider, defaultTimeoutProvider);\n    _classPrivateFieldInitSpec(this, _providerCalled, false);\n  }\n  setTimeoutProvider(provider) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (_classPrivateFieldGet(_providerCalled, this) && provider !== _classPrivateFieldGet(_provider, this)) {\n        console.error(\"[timeoutManager]: Switching provider after calls to previous provider might result in unexpected behavior.\", {\n          previous: _classPrivateFieldGet(_provider, this),\n          provider\n        });\n      }\n    }\n    _classPrivateFieldSet(_provider, this, provider);\n    if (process.env.NODE_ENV !== \"production\") {\n      _classPrivateFieldSet(_providerCalled, this, false);\n    }\n  }\n  setTimeout(callback, delay) {\n    if (process.env.NODE_ENV !== \"production\") {\n      _classPrivateFieldSet(_providerCalled, this, true);\n    }\n    return _classPrivateFieldGet(_provider, this).setTimeout(callback, delay);\n  }\n  clearTimeout(timeoutId) {\n    _classPrivateFieldGet(_provider, this).clearTimeout(timeoutId);\n  }\n  setInterval(callback, delay) {\n    if (process.env.NODE_ENV !== \"production\") {\n      _classPrivateFieldSet(_providerCalled, this, true);\n    }\n    return _classPrivateFieldGet(_provider, this).setInterval(callback, delay);\n  }\n  clearInterval(intervalId) {\n    _classPrivateFieldGet(_provider, this).clearInterval(intervalId);\n  }\n});\nvar timeoutManager = new TimeoutManager();\nfunction systemSetTimeoutZero(callback) {\n  setTimeout(callback, 0);\n}\nexport { TimeoutManager, defaultTimeoutProvider, systemSetTimeoutZero, timeoutManager };\n//# sourceMappingURL=timeoutManager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}