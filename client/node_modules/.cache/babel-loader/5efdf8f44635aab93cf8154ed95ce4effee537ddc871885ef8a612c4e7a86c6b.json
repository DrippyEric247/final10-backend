{"ast":null,"code":"import api from './authService';\nexport const ebayService = {\n  // Search eBay items\n  async searchItems(searchParams = {}) {\n    const {\n      keywords = '',\n      categoryId = '',\n      minPrice = '',\n      maxPrice = '',\n      condition = '',\n      sortOrder = 'EndTimeSoonest',\n      page = 1,\n      limit = 20\n    } = searchParams;\n    const params = new URLSearchParams();\n    if (keywords) params.append('q', keywords);\n    if (categoryId) params.append('categoryId', categoryId);\n    if (minPrice) params.append('minPrice', minPrice);\n    if (maxPrice) params.append('maxPrice', maxPrice);\n    if (condition) params.append('condition', condition);\n    if (sortOrder) params.append('sortOrder', sortOrder);\n    params.append('page', page);\n    params.append('limit', limit);\n    const response = await api.get(`/ebay/search?${params.toString()}`);\n    return response.data;\n  },\n  // Get item details by eBay item ID\n  async getItemDetails(itemId) {\n    const response = await api.get(`/ebay/item/${itemId}`);\n    return response.data;\n  },\n  // Get trending eBay items\n  async getTrendingItems(category = 'all', limit = 20) {\n    const response = await api.get('/ebay/trending', {\n      params: {\n        category,\n        limit\n      }\n    });\n    return response.data;\n  },\n  // Get ending soon items (auctions ending in next 10 minutes)\n  async getEndingSoonItems(limit = 20) {\n    const response = await api.get('/ebay/ending-soon', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  // Get best deals (high deal potential items)\n  async getBestDeals(limit = 20) {\n    const response = await api.get('/ebay/best-deals', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  // Get categories\n  async getCategories(parentCategoryId = null) {\n    const params = parentCategoryId ? {\n      parentCategoryId\n    } : {};\n    const response = await api.get('/ebay/categories', {\n      params\n    });\n    return response.data;\n  },\n  // Get seller information\n  async getSellerInfo(sellerUsername) {\n    const response = await api.get(`/ebay/seller/${sellerUsername}`);\n    return response.data;\n  },\n  // Get similar items\n  async getSimilarItems(itemId, limit = 10) {\n    const response = await api.get(`/ebay/similar/${itemId}`, {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  // Get item history (bidding history for auctions)\n  async getItemHistory(itemId) {\n    const response = await api.get(`/ebay/item/${itemId}/history`);\n    return response.data;\n  },\n  // Get watchlist\n  async getWatchlist() {\n    const response = await api.get('/ebay/watchlist');\n    return response.data;\n  },\n  // Add item to watchlist\n  async addToWatchlist(itemId) {\n    const response = await api.post('/ebay/watchlist', {\n      itemId\n    });\n    return response.data;\n  },\n  // Remove item from watchlist\n  async removeFromWatchlist(itemId) {\n    const response = await api.delete(`/ebay/watchlist/${itemId}`);\n    return response.data;\n  },\n  // Get saved searches\n  async getSavedSearches() {\n    const response = await api.get('/ebay/saved-searches');\n    return response.data;\n  },\n  // Create saved search\n  async createSavedSearch(searchData) {\n    const response = await api.post('/ebay/saved-searches', searchData);\n    return response.data;\n  },\n  // Update saved search\n  async updateSavedSearch(searchId, searchData) {\n    const response = await api.put(`/ebay/saved-searches/${searchId}`, searchData);\n    return response.data;\n  },\n  // Delete saved search\n  async deleteSavedSearch(searchId) {\n    const response = await api.delete(`/ebay/saved-searches/${searchId}`);\n    return response.data;\n  },\n  // Get item recommendations based on user behavior\n  async getRecommendations(limit = 20) {\n    const response = await api.get('/ebay/recommendations', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  // Get price history for an item\n  async getPriceHistory(itemId) {\n    const response = await api.get(`/ebay/item/${itemId}/price-history`);\n    return response.data;\n  },\n  // Get market insights for a category or keyword\n  async getMarketInsights(keyword, categoryId = null) {\n    const params = {\n      keyword\n    };\n    if (categoryId) params.categoryId = categoryId;\n    const response = await api.get('/ebay/market-insights', {\n      params\n    });\n    return response.data;\n  }\n};\nexport default ebayService;","map":{"version":3,"names":["api","ebayService","searchItems","searchParams","keywords","categoryId","minPrice","maxPrice","condition","sortOrder","page","limit","params","URLSearchParams","append","response","get","toString","data","getItemDetails","itemId","getTrendingItems","category","getEndingSoonItems","getBestDeals","getCategories","parentCategoryId","getSellerInfo","sellerUsername","getSimilarItems","getItemHistory","getWatchlist","addToWatchlist","post","removeFromWatchlist","delete","getSavedSearches","createSavedSearch","searchData","updateSavedSearch","searchId","put","deleteSavedSearch","getRecommendations","getPriceHistory","getMarketInsights","keyword"],"sources":["C:/Users/ericv/final10/client/src/services/ebayService.js"],"sourcesContent":["import api from './authService';\r\n\r\nexport const ebayService = {\r\n  // Search eBay items\r\n  async searchItems(searchParams = {}) {\r\n    const {\r\n      keywords = '',\r\n      categoryId = '',\r\n      minPrice = '',\r\n      maxPrice = '',\r\n      condition = '',\r\n      sortOrder = 'EndTimeSoonest',\r\n      page = 1,\r\n      limit = 20\r\n    } = searchParams;\r\n\r\n    const params = new URLSearchParams();\r\n    \r\n    if (keywords) params.append('q', keywords);\r\n    if (categoryId) params.append('categoryId', categoryId);\r\n    if (minPrice) params.append('minPrice', minPrice);\r\n    if (maxPrice) params.append('maxPrice', maxPrice);\r\n    if (condition) params.append('condition', condition);\r\n    if (sortOrder) params.append('sortOrder', sortOrder);\r\n    params.append('page', page);\r\n    params.append('limit', limit);\r\n\r\n    const response = await api.get(`/ebay/search?${params.toString()}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get item details by eBay item ID\r\n  async getItemDetails(itemId) {\r\n    const response = await api.get(`/ebay/item/${itemId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get trending eBay items\r\n  async getTrendingItems(category = 'all', limit = 20) {\r\n    const response = await api.get('/ebay/trending', {\r\n      params: { category, limit }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get ending soon items (auctions ending in next 10 minutes)\r\n  async getEndingSoonItems(limit = 20) {\r\n    const response = await api.get('/ebay/ending-soon', {\r\n      params: { limit }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get best deals (high deal potential items)\r\n  async getBestDeals(limit = 20) {\r\n    const response = await api.get('/ebay/best-deals', {\r\n      params: { limit }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get categories\r\n  async getCategories(parentCategoryId = null) {\r\n    const params = parentCategoryId ? { parentCategoryId } : {};\r\n    const response = await api.get('/ebay/categories', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get seller information\r\n  async getSellerInfo(sellerUsername) {\r\n    const response = await api.get(`/ebay/seller/${sellerUsername}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get similar items\r\n  async getSimilarItems(itemId, limit = 10) {\r\n    const response = await api.get(`/ebay/similar/${itemId}`, {\r\n      params: { limit }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get item history (bidding history for auctions)\r\n  async getItemHistory(itemId) {\r\n    const response = await api.get(`/ebay/item/${itemId}/history`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get watchlist\r\n  async getWatchlist() {\r\n    const response = await api.get('/ebay/watchlist');\r\n    return response.data;\r\n  },\r\n\r\n  // Add item to watchlist\r\n  async addToWatchlist(itemId) {\r\n    const response = await api.post('/ebay/watchlist', { itemId });\r\n    return response.data;\r\n  },\r\n\r\n  // Remove item from watchlist\r\n  async removeFromWatchlist(itemId) {\r\n    const response = await api.delete(`/ebay/watchlist/${itemId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get saved searches\r\n  async getSavedSearches() {\r\n    const response = await api.get('/ebay/saved-searches');\r\n    return response.data;\r\n  },\r\n\r\n  // Create saved search\r\n  async createSavedSearch(searchData) {\r\n    const response = await api.post('/ebay/saved-searches', searchData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update saved search\r\n  async updateSavedSearch(searchId, searchData) {\r\n    const response = await api.put(`/ebay/saved-searches/${searchId}`, searchData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete saved search\r\n  async deleteSavedSearch(searchId) {\r\n    const response = await api.delete(`/ebay/saved-searches/${searchId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get item recommendations based on user behavior\r\n  async getRecommendations(limit = 20) {\r\n    const response = await api.get('/ebay/recommendations', {\r\n      params: { limit }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get price history for an item\r\n  async getPriceHistory(itemId) {\r\n    const response = await api.get(`/ebay/item/${itemId}/price-history`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get market insights for a category or keyword\r\n  async getMarketInsights(keyword, categoryId = null) {\r\n    const params = { keyword };\r\n    if (categoryId) params.categoryId = categoryId;\r\n    \r\n    const response = await api.get('/ebay/market-insights', { params });\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default ebayService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}