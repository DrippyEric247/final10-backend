{"ast":null,"code":"import axios from\"axios\";// force baseURL to backend (skip dev proxy)\nconst API_BASE='/api';export const api=axios.create({baseURL:API_BASE,headers:{\"Content-Type\":\"application/json\"}});// Rate limiting handler - prevent excessive requests\nlet requestCount=0;let lastRequestTime=0;const REQUEST_LIMIT=30;// Max 30 requests per minute (increased from 10)\nconst TIME_WINDOW=60000;// 1 minute\n// Request interceptor to track requests\napi.interceptors.request.use(config=>{const now=Date.now();// Reset counter if time window has passed\nif(now-lastRequestTime>TIME_WINDOW){requestCount=0;lastRequestTime=now;}// Check if we're hitting rate limits\nif(requestCount>=REQUEST_LIMIT){const timeUntilReset=TIME_WINDOW-(now-lastRequestTime);console.warn(\"Rate limit reached. Waiting \".concat(Math.ceil(timeUntilReset/1000),\" seconds...\"));// Instead of rejecting, add a small delay to prevent overwhelming the server\nreturn new Promise(resolve=>{setTimeout(()=>{resolve(config);},Math.min(timeUntilReset,5000));// Max 5 second delay\n});}requestCount++;return config;},error=>{return Promise.reject(error);});// Response interceptor to handle 429 errors\napi.interceptors.response.use(response=>{return response;},error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===429){const retryAfter=error.response.headers['retry-after']||60;console.warn(\"Rate limited by server. Retry after \".concat(retryAfter,\" seconds.\"));// Create a more user-friendly error message\nconst rateLimitError=new Error(\"Too many requests. Please wait \".concat(retryAfter,\" seconds before trying again.\"));rateLimitError.status=429;rateLimitError.retryAfter=retryAfter;return Promise.reject(rateLimitError);}return Promise.reject(error);});// token helpers (unchanged)\nexport const STORAGE_KEY=\"f10_token\";export function setAuthToken(token){if(token){localStorage.setItem(STORAGE_KEY,token);api.defaults.headers.common.Authorization=\"Bearer \".concat(token);}else{localStorage.removeItem(STORAGE_KEY);delete api.defaults.headers.common.Authorization;}}const saved=localStorage.getItem(STORAGE_KEY);if(saved)setAuthToken(saved);// AUTH endpoints (note the /api prefix now baked into baseURL)\nexport async function loginUser(_ref){let{email,password}=_ref;const{data}=await api.post(\"/auth/login\",{email,password});setAuthToken(data.token);return data.user;}export async function registerUser(payload){const{data}=await api.post(\"/auth/signup\",payload);setAuthToken(data.token);return data.user;}/** NEW: get current user from token */export async function getMe(){const{data}=await api.get(\"/auth/me\");return data;// { id, email, username, ... }\n}/** ---- Points ---- **/export async function getMyPoints(){const{data}=await api.get(\"/points/me\");return data;// { balance, history }\n}export async function claimDailyLogin(){const{data}=await api.post(\"/auctions/claim-daily-login\");return data;// { newBalance, added } or { message }\n}/** ---- Alerts ---- **/export async function getAlerts(){const{data}=await api.get(\"/alerts\");return data;}export async function createAlert(alertData){const{data}=await api.post(\"/alerts\",alertData);return data;}export async function toggleAlert(alertId){const{data}=await api.patch(\"/alerts/\".concat(alertId,\"/toggle\"));return data;}export async function deleteAlert(alertId){const{data}=await api.delete(\"/alerts/\".concat(alertId));return data;}/** ---- Daily Tasks ---- **/export async function getDailyTasks(){const{data}=await api.get(\"/auctions/daily-tasks\");return data;}export async function watchAd(){const{data}=await api.post(\"/auctions/watch-ad\");return data;}export async function trackAppShare(shareUrl,platform){const{data}=await api.post(\"/auctions/track-app-share\",{shareUrl,platform});return data;}export async function trackProductShare(productId,productTitle,shareUrl,platform){const{data}=await api.post(\"/auctions/track-product-share\",{productId,productTitle,shareUrl,platform});return data;}export async function completeSocialPost(platform,postUrl){const{data}=await api.post(\"/auctions/complete-social-post\",{platform,postUrl});return data;}/** ---- Level System ---- **/export async function getLevelInfo(){const{data}=await api.get(\"/levels/me\");return data;}export async function getLevelLeaderboard(){let type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'level';let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;const{data}=await api.get(\"/levels/leaderboard\",{params:{type,limit}});return data;}export async function getMilestones(){const{data}=await api.get(\"/levels/milestones\");return data;}export async function getLevelStats(){const{data}=await api.get(\"/levels/stats\");return data;}// Payment API functions\nexport async function createPaymentIntent(){let planId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'monthly';const{data}=await api.post(\"/payments/create-payment-intent\",{planId});return data;}export async function confirmPayment(paymentIntentId){const{data}=await api.post(\"/payments/confirm-payment\",{paymentIntentId});return data;}export async function getSubscriptionStatus(){const{data}=await api.get(\"/payments/subscription-status\");return data;}export async function getPaymentPlans(){const{data}=await api.get(\"/payments/plans\");return data;}export async function cancelSubscription(){const{data}=await api.post(\"/payments/cancel-subscription\");return data;}// Local Deals API functions\nexport async function searchLocalDeals(searchTerm){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let radius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:25;const{data}=await api.get(\"/local-deals/search\",{params:{q:searchTerm,limit,radius}});return data;}export async function getTrendingLocalDeals(){let category=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'all';let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;const{data}=await api.get(\"/local-deals/trending\",{params:{category,limit}});return data;}export async function getLocalDealsByCategory(category){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:15;const{data}=await api.get(\"/local-deals/categories/\".concat(category),{params:{limit}});return data;}// Daily task tracking functions\nexport async function trackVideoScanner(){const{data}=await api.post(\"/auctions/track-video-scanner\");return data;}export async function trackLocalDealsSearch(searchTerm){const{data}=await api.post(\"/auctions/track-local-deals-search\",{searchTerm});return data;}// Community Goals API functions\nexport async function getCommunityGoals(){const{data}=await api.get(\"/community/goals\");return data;}export async function getCommunityProgress(){const{data}=await api.get(\"/community/progress\");return data;}export async function claimCommunityReward(){const{data}=await api.post(\"/community/claim-reward\");return data;}/** ---- eBay API ---- **/export async function searchEbayItems(){let searchParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{data}=await api.get(\"/ebay/search\",{params:searchParams});return data;}export async function getEbayItemDetails(itemId){const{data}=await api.get(\"/ebay/item/\".concat(itemId));return data;}export async function getEbayTrendingItems(){let category=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'all';let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;const{data}=await api.get(\"/ebay/trending\",{params:{category,limit}});return data;}export async function getEbayEndingSoonItems(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:20;const{data}=await api.get(\"/ebay/ending-soon\",{params:{limit}});return data;}export async function getEbayBestDeals(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:20;const{data}=await api.get(\"/ebay/best-deals\",{params:{limit}});return data;}export async function getEbayCategories(){let parentCategoryId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;const params=parentCategoryId?{parentCategoryId}:{};const{data}=await api.get(\"/ebay/categories\",{params});return data;}export async function getEbayWatchlist(){const{data}=await api.get(\"/ebay/watchlist\");return data;}export async function addToEbayWatchlist(itemId){const{data}=await api.post(\"/ebay/watchlist\",{itemId});return data;}export async function removeFromEbayWatchlist(itemId){const{data}=await api.delete(\"/ebay/watchlist/\".concat(itemId));return data;}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}