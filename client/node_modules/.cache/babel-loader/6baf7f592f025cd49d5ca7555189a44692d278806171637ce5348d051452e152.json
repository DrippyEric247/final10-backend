{"ast":null,"code":"// Hashtag Tracking Service\n// This service handles automated social media hashtag tracking and points awarding\n\nclass HashtagTrackerService {\n  constructor() {\n    this.baseURL = 'http://localhost:5000/api';\n    this.hashtags = ['#StayEarning', '#StaySavvy', '#Final10', '#AuctionWin'];\n    this.platforms = ['twitter', 'instagram'];\n  }\n\n  // Get authentication token\n  getAuthToken() {\n    return localStorage.getItem('f10_token');\n  }\n\n  // Make authenticated API request\n  async makeRequest(endpoint, options = {}) {\n    const token = this.getAuthToken();\n    const url = `${this.baseURL}${endpoint}`;\n    const defaultOptions = {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    };\n    const response = await fetch(url, {\n      ...defaultOptions,\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  // Social Media Connection Management\n  async getConnections() {\n    return this.makeRequest('/social/connections');\n  }\n  async connectAccount(platform, authData) {\n    return this.makeRequest('/social/connect', {\n      method: 'POST',\n      body: JSON.stringify({\n        platform,\n        authData\n      })\n    });\n  }\n  async disconnectAccount(platform) {\n    return this.makeRequest('/social/disconnect', {\n      method: 'POST',\n      body: JSON.stringify({\n        platform\n      })\n    });\n  }\n\n  // Hashtag Tracking\n  async getTrackedPosts(limit = 50, offset = 0) {\n    return this.makeRequest(`/social/tracked-posts?limit=${limit}&offset=${offset}`);\n  }\n  async triggerHashtagScan() {\n    return this.makeRequest('/social/scan-hashtags', {\n      method: 'POST'\n    });\n  }\n  async getCampaignStats() {\n    return this.makeRequest('/social/campaign-stats');\n  }\n\n  // Post Management\n  async submitPostForTracking(platform, postUrl, hashtags = []) {\n    return this.makeRequest('/social/submit-post', {\n      method: 'POST',\n      body: JSON.stringify({\n        platform,\n        postUrl,\n        hashtags\n      })\n    });\n  }\n  async verifyPost(postId, verificationData) {\n    return this.makeRequest(`/social/verify-post/${postId}`, {\n      method: 'POST',\n      body: JSON.stringify(verificationData)\n    });\n  }\n\n  // Analytics and Insights\n  async getHashtagAnalytics(hashtag, timeRange = '7d') {\n    return this.makeRequest(`/social/analytics/${hashtag}?timeRange=${timeRange}`);\n  }\n  async getUserSocialStats(userId) {\n    return this.makeRequest(`/social/user-stats/${userId}`);\n  }\n\n  // Real-time Updates (WebSocket simulation with polling)\n  startRealTimeUpdates(callback, interval = 30000) {\n    this.updateInterval = setInterval(async () => {\n      try {\n        const [posts, stats] = await Promise.all([this.getTrackedPosts(10, 0), this.getCampaignStats()]);\n        callback({\n          posts,\n          stats,\n          timestamp: Date.now()\n        });\n      } catch (error) {\n        console.error('Real-time update failed:', error);\n      }\n    }, interval);\n    return () => clearInterval(this.updateInterval);\n  }\n  stopRealTimeUpdates() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n  }\n\n  // Utility Functions\n  extractHashtags(text) {\n    const hashtagRegex = /#[\\w\\u0590-\\u05ff]+/g;\n    return text.match(hashtagRegex) || [];\n  }\n  calculatePoints(post) {\n    let basePoints = 300; // Default social post points\n    const hashtags = this.extractHashtags(post.content || '');\n\n    // Check for specific hashtags that give bonus points\n    if (hashtags.includes('#AuctionWin')) basePoints = 500;\n    if (hashtags.includes('#Final10')) basePoints = 200;\n\n    // Engagement bonuses\n    let engagementBonus = 0;\n    if (post.likes > 100) engagementBonus += 100;\n    if (post.likes > 1000) engagementBonus += 200;\n    if (post.retweets > 50) engagementBonus += 50;\n    if (post.comments > 25) engagementBonus += 25;\n\n    // Viral bonus\n    if (post.likes > 10000) engagementBonus += 500;\n    return basePoints + engagementBonus;\n  }\n  formatPostForDisplay(post) {\n    return {\n      id: post.id,\n      platform: post.platform,\n      username: post.username,\n      content: post.content,\n      url: post.url,\n      hashtags: this.extractHashtags(post.content || ''),\n      likes: post.likes || 0,\n      retweets: post.retweets || 0,\n      comments: post.comments || 0,\n      createdAt: post.createdAt,\n      pointsEarned: this.calculatePoints(post),\n      verified: post.verified || false\n    };\n  }\n\n  // Mock Social Media API Integration (for development)\n  async mockSocialMediaAPI(platform, endpoint, params = {}) {\n    // This would be replaced with actual social media API calls\n    const mockResponses = {\n      twitter: {\n        posts: [{\n          id: '1',\n          content: 'Just won an amazing auction on Final10! #StayEarning #StaySavvy',\n          username: 'user123',\n          likes: 45,\n          retweets: 12,\n          comments: 8,\n          createdAt: new Date(Date.now() - 3600000).toISOString(),\n          url: 'https://twitter.com/user123/status/123456789'\n        }]\n      },\n      instagram: {\n        posts: [{\n          id: '2',\n          content: 'Found the perfect deal! #Final10 #AuctionWin',\n          username: 'user456',\n          likes: 128,\n          retweets: 23,\n          comments: 15,\n          createdAt: new Date(Date.now() - 7200000).toISOString(),\n          url: 'https://instagram.com/p/abc123'\n        }]\n      }\n    };\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(mockResponses[platform] || {\n          posts: []\n        });\n      }, 1000);\n    });\n  }\n\n  // Batch Processing\n  async processBatchPosts(posts) {\n    const processedPosts = posts.map(post => this.formatPostForDisplay(post));\n    const totalPoints = processedPosts.reduce((sum, post) => sum + post.pointsEarned, 0);\n    return {\n      posts: processedPosts,\n      totalPoints,\n      processedAt: new Date().toISOString()\n    };\n  }\n\n  // Error Handling\n  handleError(error, context = '') {\n    console.error(`HashtagTracker Error${context ? ` (${context})` : ''}:`, error);\n    if (error.message.includes('401')) {\n      throw new Error('Authentication failed. Please log in again.');\n    } else if (error.message.includes('429')) {\n      throw new Error('Too many requests. Please wait a moment and try again.');\n    } else if (error.message.includes('500')) {\n      throw new Error('Server error. Please try again later.');\n    } else {\n      throw new Error(error.message || 'An unexpected error occurred.');\n    }\n  }\n}\n\n// Create and export singleton instance\nconst hashtagTrackerService = new HashtagTrackerService();\nexport default hashtagTrackerService;\n\n// Export class for testing\nexport { HashtagTrackerService };","map":{"version":3,"names":["HashtagTrackerService","constructor","baseURL","hashtags","platforms","getAuthToken","localStorage","getItem","makeRequest","endpoint","options","token","url","defaultOptions","headers","response","fetch","ok","Error","status","statusText","json","getConnections","connectAccount","platform","authData","method","body","JSON","stringify","disconnectAccount","getTrackedPosts","limit","offset","triggerHashtagScan","getCampaignStats","submitPostForTracking","postUrl","verifyPost","postId","verificationData","getHashtagAnalytics","hashtag","timeRange","getUserSocialStats","userId","startRealTimeUpdates","callback","interval","updateInterval","setInterval","posts","stats","Promise","all","timestamp","Date","now","error","console","clearInterval","stopRealTimeUpdates","extractHashtags","text","hashtagRegex","match","calculatePoints","post","basePoints","content","includes","engagementBonus","likes","retweets","comments","formatPostForDisplay","id","username","createdAt","pointsEarned","verified","mockSocialMediaAPI","params","mockResponses","twitter","toISOString","instagram","resolve","setTimeout","processBatchPosts","processedPosts","map","totalPoints","reduce","sum","processedAt","handleError","context","message","hashtagTrackerService"],"sources":["C:/Users/ericv/final10/client/src/services/hashtagTracker.js"],"sourcesContent":["// Hashtag Tracking Service\r\n// This service handles automated social media hashtag tracking and points awarding\r\n\r\nclass HashtagTrackerService {\r\n  constructor() {\r\n    this.baseURL = 'http://localhost:5000/api';\r\n    this.hashtags = [\r\n      '#StayEarning',\r\n      '#StaySavvy', \r\n      '#Final10',\r\n      '#AuctionWin'\r\n    ];\r\n    this.platforms = ['twitter', 'instagram'];\r\n  }\r\n\r\n  // Get authentication token\r\n  getAuthToken() {\r\n    return localStorage.getItem('f10_token');\r\n  }\r\n\r\n  // Make authenticated API request\r\n  async makeRequest(endpoint, options = {}) {\r\n    const token = this.getAuthToken();\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    const defaultOptions = {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n        ...options.headers\r\n      }\r\n    };\r\n\r\n    const response = await fetch(url, { ...defaultOptions, ...options });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  // Social Media Connection Management\r\n  async getConnections() {\r\n    return this.makeRequest('/social/connections');\r\n  }\r\n\r\n  async connectAccount(platform, authData) {\r\n    return this.makeRequest('/social/connect', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ platform, authData })\r\n    });\r\n  }\r\n\r\n  async disconnectAccount(platform) {\r\n    return this.makeRequest('/social/disconnect', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ platform })\r\n    });\r\n  }\r\n\r\n  // Hashtag Tracking\r\n  async getTrackedPosts(limit = 50, offset = 0) {\r\n    return this.makeRequest(`/social/tracked-posts?limit=${limit}&offset=${offset}`);\r\n  }\r\n\r\n  async triggerHashtagScan() {\r\n    return this.makeRequest('/social/scan-hashtags', {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  async getCampaignStats() {\r\n    return this.makeRequest('/social/campaign-stats');\r\n  }\r\n\r\n  // Post Management\r\n  async submitPostForTracking(platform, postUrl, hashtags = []) {\r\n    return this.makeRequest('/social/submit-post', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ platform, postUrl, hashtags })\r\n    });\r\n  }\r\n\r\n  async verifyPost(postId, verificationData) {\r\n    return this.makeRequest(`/social/verify-post/${postId}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(verificationData)\r\n    });\r\n  }\r\n\r\n  // Analytics and Insights\r\n  async getHashtagAnalytics(hashtag, timeRange = '7d') {\r\n    return this.makeRequest(`/social/analytics/${hashtag}?timeRange=${timeRange}`);\r\n  }\r\n\r\n  async getUserSocialStats(userId) {\r\n    return this.makeRequest(`/social/user-stats/${userId}`);\r\n  }\r\n\r\n  // Real-time Updates (WebSocket simulation with polling)\r\n  startRealTimeUpdates(callback, interval = 30000) {\r\n    this.updateInterval = setInterval(async () => {\r\n      try {\r\n        const [posts, stats] = await Promise.all([\r\n          this.getTrackedPosts(10, 0),\r\n          this.getCampaignStats()\r\n        ]);\r\n        callback({ posts, stats, timestamp: Date.now() });\r\n      } catch (error) {\r\n        console.error('Real-time update failed:', error);\r\n      }\r\n    }, interval);\r\n\r\n    return () => clearInterval(this.updateInterval);\r\n  }\r\n\r\n  stopRealTimeUpdates() {\r\n    if (this.updateInterval) {\r\n      clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    }\r\n  }\r\n\r\n  // Utility Functions\r\n  extractHashtags(text) {\r\n    const hashtagRegex = /#[\\w\\u0590-\\u05ff]+/g;\r\n    return text.match(hashtagRegex) || [];\r\n  }\r\n\r\n  calculatePoints(post) {\r\n    let basePoints = 300; // Default social post points\r\n    const hashtags = this.extractHashtags(post.content || '');\r\n    \r\n    // Check for specific hashtags that give bonus points\r\n    if (hashtags.includes('#AuctionWin')) basePoints = 500;\r\n    if (hashtags.includes('#Final10')) basePoints = 200;\r\n    \r\n    // Engagement bonuses\r\n    let engagementBonus = 0;\r\n    if (post.likes > 100) engagementBonus += 100;\r\n    if (post.likes > 1000) engagementBonus += 200;\r\n    if (post.retweets > 50) engagementBonus += 50;\r\n    if (post.comments > 25) engagementBonus += 25;\r\n    \r\n    // Viral bonus\r\n    if (post.likes > 10000) engagementBonus += 500;\r\n    \r\n    return basePoints + engagementBonus;\r\n  }\r\n\r\n  formatPostForDisplay(post) {\r\n    return {\r\n      id: post.id,\r\n      platform: post.platform,\r\n      username: post.username,\r\n      content: post.content,\r\n      url: post.url,\r\n      hashtags: this.extractHashtags(post.content || ''),\r\n      likes: post.likes || 0,\r\n      retweets: post.retweets || 0,\r\n      comments: post.comments || 0,\r\n      createdAt: post.createdAt,\r\n      pointsEarned: this.calculatePoints(post),\r\n      verified: post.verified || false\r\n    };\r\n  }\r\n\r\n  // Mock Social Media API Integration (for development)\r\n  async mockSocialMediaAPI(platform, endpoint, params = {}) {\r\n    // This would be replaced with actual social media API calls\r\n    const mockResponses = {\r\n      twitter: {\r\n        posts: [\r\n          {\r\n            id: '1',\r\n            content: 'Just won an amazing auction on Final10! #StayEarning #StaySavvy',\r\n            username: 'user123',\r\n            likes: 45,\r\n            retweets: 12,\r\n            comments: 8,\r\n            createdAt: new Date(Date.now() - 3600000).toISOString(),\r\n            url: 'https://twitter.com/user123/status/123456789'\r\n          }\r\n        ]\r\n      },\r\n      instagram: {\r\n        posts: [\r\n          {\r\n            id: '2',\r\n            content: 'Found the perfect deal! #Final10 #AuctionWin',\r\n            username: 'user456',\r\n            likes: 128,\r\n            retweets: 23,\r\n            comments: 15,\r\n            createdAt: new Date(Date.now() - 7200000).toISOString(),\r\n            url: 'https://instagram.com/p/abc123'\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(mockResponses[platform] || { posts: [] });\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  // Batch Processing\r\n  async processBatchPosts(posts) {\r\n    const processedPosts = posts.map(post => this.formatPostForDisplay(post));\r\n    const totalPoints = processedPosts.reduce((sum, post) => sum + post.pointsEarned, 0);\r\n    \r\n    return {\r\n      posts: processedPosts,\r\n      totalPoints,\r\n      processedAt: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  // Error Handling\r\n  handleError(error, context = '') {\r\n    console.error(`HashtagTracker Error${context ? ` (${context})` : ''}:`, error);\r\n    \r\n    if (error.message.includes('401')) {\r\n      throw new Error('Authentication failed. Please log in again.');\r\n    } else if (error.message.includes('429')) {\r\n      throw new Error('Too many requests. Please wait a moment and try again.');\r\n    } else if (error.message.includes('500')) {\r\n      throw new Error('Server error. Please try again later.');\r\n    } else {\r\n      throw new Error(error.message || 'An unexpected error occurred.');\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst hashtagTrackerService = new HashtagTrackerService();\r\nexport default hashtagTrackerService;\r\n\r\n// Export class for testing\r\nexport { HashtagTrackerService };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}